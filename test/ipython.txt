Out[51]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [52]: x[:5]
Out[52]: array([0, 1, 2, 3, 4])

In [53]: 

In [53]: x[5:]
Out[53]: array([5, 6, 7, 8, 9])

In [54]: x[::2]
Out[54]: array([0, 2, 4, 6, 8])

In [55]: x[1::2]
Out[55]: array([1, 3, 5, 7, 9])

In [56]: x[::-1]
Out[56]: array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])

In [57]: x[5::-2]
Out[57]: array([5, 3, 1])

In [58]: x2
Out[58]: 
array([[3, 5, 2, 4],
       [7, 6, 8, 8],
       [1, 6, 7, 7]])

In [59]: 

In [59]: 

In [59]: x2[:2,:3]
Out[59]: 
array([[3, 5, 2],
       [7, 6, 8]])

In [60]: x2[0,0]=12

In [61]: x2[:2,:3]
Out[61]: 
array([[12,  5,  2],
       [ 7,  6,  8]])

In [62]: x2[:,::2]
Out[62]: 
array([[12,  2],
       [ 7,  8],
       [ 1,  7]])

In [63]: x2[::-1,::-1]
Out[63]: 
array([[ 7,  7,  6,  1],
       [ 8,  8,  6,  7],
       [ 4,  2,  5, 12]])

In [64]: x2[,0]
  Input In [64]
    x2[,0]
       ^
SyntaxError: invalid syntax


In [65]: x2[0]
Out[65]: array([12,  5,  2,  4])

In [66]: 

In [66]: x2_sub_copy = x2[:2,:2].copy()

In [67]: x2_sub_copy
Out[67]: 
array([[12,  5],
       [ 7,  6]])

In [68]: x2_sub_copy[0,0] = 0

In [69]: 

In [69]: x2
Out[69]: 
array([[12,  5,  2,  4],
       [ 7,  6,  8,  8],
       [ 1,  6,  7,  7]])

In [70]: x2_copy = x2[:2,:2]

In [71]: x2_copy = 0

In [72]: x2
Out[72]: 
array([[12,  5,  2,  4],
       [ 7,  6,  8,  8],
       [ 1,  6,  7,  7]])

In [73]: grid = np.arange(1,10).reshap(3,3)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Input In [73], in <cell line: 1>()
----> 1 grid = np.arange(1,10).reshap(3,3)

AttributeError: 'numpy.ndarray' object has no attribute 'reshap'

In [74]: grid = np.arange(1,10).reshap((3,3))
---------------------------------------------------------------------------     
AttributeError                            Traceback (most recent call last)     
Input In [74], in <cell line: 1>()
----> 1 grid = np.arange(1,10).reshap((3,3))

AttributeError: 'numpy.ndarray' object has no attribute 'reshap'

In [75]: grid = np.arange(1,10).reshape((3,3))

In [76]: print(grid)
[[1 2 3]
 [4 5 6]
 [7 8 9]]

In [77]: exit
PS E:\my_code\py\test> ipython
Python 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.4.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import numpy as np

In [2]: np.random.seed(0)

In [3]: def compute_reciprocals(values):
   ...:     output = np.empty(len(values))
   ...:     for i in range(len(values)):
   ...:         output[i] = 1.0/values[i]
   ...:     return output
   ...: values = np.random.randint(1,10,size = 5)

In [4]: compute_reciprocals(values)
Out[4]: array([0.16666667, 1.        , 0.25      , 0.25      , 0.125     ])

In [5]: %timeit compute_reciprocals(values)
8.94 µs ± 33.3 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)

In [6]: big_array = np.random.randint(1,100,size = 1000000)

In [7]: %timeit compute_reciprocals(big_array)
1.64 s ± 7.91 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

In [8]: np.arange(5)/np.arange(1,6))
  Input In [8]
    np.arange(5)/np.arange(1,6))
                               ^
SyntaxError: unmatched ')'


In [9]: np.arange(5)/np.arange(1,6)
Out[9]: array([0.        , 0.5       , 0.66666667, 0.75      , 0.8       ])

In [10]: x = np.arange(9).reshape((3,3))

In [11]: 2**x
Out[11]: 
array([[  1,   2,   4],
       [  8,  16,  32],
       [ 64, 128, 256]], dtype=int32)

In [12]: %timeit (1/big_array)
3.27 ms ± 74.9 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

In [13]: x = np.arange(4)

In [14]: print("x    =",x)
x    = [0 1 2 3]

In [15]: print("x     =",x)\
    ...: print("x + 5 =",x + 5)\
    ...: print("x - 5 =",x - 5)\
    ...: print("x * 2 =",x * 2)\
    ...: print("x / 2 =",x / 2)\
    ...: print("x // 2 =",x // 2)
  Input In [15]
    print("x + 5 =",x + 5)\
    ^
SyntaxError: invalid syntax


In [16]: print("x     =", x)
    ...: print("x + 5 =", x + 5)
    ...: print("x - 5 =", x - 5)
    ...: print("x * 2 =", x * 2)
    ...: print("x / 2 =", x / 2)
    ...: print("x // 2 =", x // 2)
x     = [0 1 2 3]
x + 5 = [5 6 7 8]
x - 5 = [-5 -4 -3 -2]
x * 2 = [0 2 4 6]
x / 2 = [0.  0.5 1.  1.5]
x // 2 = [0 0 1 1]

In [17]: print("x     =", x)/
    ...: print("x + 5 =", x + 5)
    ...: print("x - 5 =", x - 5)
    ...: print("x * 2 =", x * 2)
    ...: print("x / 2 =", x / 2)
    ...: print("x // 2 =", x // 2)
  Input In [17]
    print("x     =", x)/
                        ^
SyntaxError: invalid syntax


In [18]: print("x     =", x)
    ...: print("x + 5 =", x + 5)
    ...: print("x - 5 =", x - 5)
    ...: print("x * 2 =", x * 2)
    ...: print("x / 2 =", x / 2)
    ...: print("x // 2 =", x // 2)
x     = [0 1 2 3]
x + 5 = [5 6 7 8]
x - 5 = [-5 -4 -3 -2]
x * 2 = [0 2 4 6]
x / 2 = [0.  0.5 1.  1.5]
x // 2 = [0 0 1 1]

In [19]: x = np.array([-2,-1,0,1,2])

In [20]: abs(x)
Out[20]: array([2, 1, 0, 1, 2])

In [21]: x
Out[21]: array([-2, -1,  0,  1,  2])

In [22]: np.abs(x)
Out[22]: array([2, 1, 0, 1, 2])

In [23]: x = np.array([3-4j,4-3j,2+0j,0+1j])\
    ...: np.abs(x)
  Input In [23]
    np.abs(x)
    ^
SyntaxError: invalid syntax


In [24]: x = np.array([3-4j,4-3j,2+0j,0+1j])
    ...: np.abs(x)
Out[24]: array([5., 5., 2., 1.])

In [25]: theta = np.linsapce(0,np.pi,3)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Input In [25], in <cell line: 1>()
----> 1 theta = np.linsapce(0,np.pi,3)

File ~\miniconda3\lib\site-packages\numpy\__init__.py:311, in __getattr__(attr)
    308     from .testing import Tester
    309     return Tester
--> 311 raise AttributeError("module {!r} has no attribute "
    312                      "{!r}".format(__name__, attr))

AttributeError: module 'numpy' has no attribute 'linsapce'

In [26]: theta = np.linspace(0,np.pi,3)

In [27]: print("theta      = ",theta)
    ...: print("sin(theta) = ",np.sin(theta))
    ...: print("cos(theta) = ",np.cos(theta))
    ...: print("tan(theta) = ",np.tan(theta))
theta      =  [0.         1.57079633 3.14159265]
sin(theta) =  [0.0000000e+00 1.0000000e+00 1.2246468e-16]
cos(theta) =  [ 1.000000e+00  6.123234e-17 -1.000000e+00]
tan(theta) =  [ 0.00000000e+00  1.63312394e+16 -1.22464680e-16]

In [28]: print("theta      = ",theta)
    ...: print("sin(theta) = ",np.sin(theta))
    ...: print("cos(theta) = ",np.cos(theta))
    ...: print("tan(theta) = ",np.tan(theta))
theta      =  [0.         1.57079633 3.14159265]
sin(theta) =  [0.0000000e+00 1.0000000e+00 1.2246468e-16]
cos(theta) =  [ 1.000000e+00  6.123234e-17 -1.000000e+00]
tan(theta) =  [ 0.00000000e+00  1.63312394e+16 -1.22464680e-16]

In [29]: x = [1,2,3,10]

In [30]: print("x       = ",x)
    ...: print("ln(x)   = ",np.log(x))
    ...: print("log2(x) = ",np.log2(x))
    ...: print("3^x     = ",np.power(3,x))
x       =  [1, 2, 3, 10]
ln(x)   =  [0.         0.69314718 1.09861229 2.30258509]
log2(x) =  [0.         1.         1.5849625  3.32192809]
3^x     =  [    3     9    27 59049]

In [31]: x[3] = 4

In [32]: print("x       = ",x)
    ...: print("ln(x)   = ",np.log(x))
    ...: print("log2(x) = ",np.log2(x))
    ...: print("3^x     = ",np.power(3,x))
x       =  [1, 2, 3, 4]
ln(x)   =  [0.         0.69314718 1.09861229 1.38629436]
log2(x) =  [0.        1.        1.5849625 2.       ]
3^x     =  [ 3  9 27 81]

In [33]: x
Out[33]: [1, 2, 3, 4]

In [34]: x = [1,2,4,10]

In [35]: x[3]
Out[35]: 10

In [36]: x
Out[36]: [1, 2, 4, 10]

In [37]: print("x       = ",x)
    ...: print("ln(x)   = ",np.log(x))
    ...: print("log2(x) = ",np.log2(x))
    ...: print("3^x     = ",np.power(3,x))
x       =  [1, 2, 4, 10]
ln(x)   =  [0.         0.69314718 1.38629436 2.30258509]
log2(x) =  [0.         1.         2.         3.32192809]
3^x     =  [    3     9    81 59049]

In [38]: print("x        = ",x)
    ...: print("ln(x)    = ",np.log(x))
    ...: print("log2(x)  = ",np.log2(x))
    ...: print("log10(x) = ",np.log10(x))
x        =  [1, 2, 4, 10]
ln(x)    =  [0.         0.69314718 1.38629436 2.30258509]
log2(x)  =  [0.         1.         2.         3.32192809]
log10(x) =  [0.         0.30103    0.60205999 1.        ]

In [39]: from scipy import special
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
Input In [39], in <cell line: 1>()
----> 1 from scipy import special

ModuleNotFoundError: No module named 'scipy'

In [40]: from scipy import special
C:\Users\15350\miniconda3\lib\site-packages\scipy\__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.1
  warnings.warn(f"A NumPy version >={np_minversion} and <{np_maxversion}"

In [41]: numpy.__version__
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Input In [41], in <cell line: 1>()
----> 1 numpy.__version__

NameError: name 'numpy' is not defined

In [42]: np.__version__
Out[42]: '1.23.1'

In [43]: # Gama函数（广义阶乘，generalized factorials）和相关函数

In [44]: x = [1,5,10]

In [45]: print("gamma(x)     =",special.gamma(x))
gamma(x)     = [1.0000e+00 2.4000e+01 3.6288e+05]

In [46]: 

In [46]: print("gamma(x)     =",special.gamma(x))\
    ...: print("ln|gamma(x)| =",special.gammaln(x))\
    ...: print("beta(x,2)    =",special.beta(x,2))
  Input In [46]
    print("ln|gamma(x)| =",special.gammaln(x))\
    ^
SyntaxError: invalid syntax


In [47]: print("gamma(x)     =",special.gamma(x))
    ...: print("ln|gamma(x)| =",special.gammaln(x))
    ...: print("beta(x,2)    =",special.beta(x,2))
gamma(x)     = [1.0000e+00 2.4000e+01 3.6288e+05]
ln|gamma(x)| = [ 0.          3.17805383 12.80182748]
beta(x,2)    = [0.5        0.03333333 0.00909091]

In [48]: x = np.array([0,0.3,0.7,1.0])\
    ...: print("erf(x)    =",special.erf(x))
    ...: print("erfc(x)   =",special.erfc(x))
    ...: print("erfinv(x) =",special.erfinv(x))
  Input In [48]
    print("erf(x)    =",special.erf(x))
    ^
SyntaxError: invalid syntax


In [49]: x = np.array([0,0.3,0.7,1.0])
    ...: print("erf(x)    =",special.erf(x))
    ...: print("erfc(x)   =",special.erfc(x))
    ...: print("erfinv(x) =",special.erfinv(x))
erf(x)    = [0.         0.32862676 0.67780119 0.84270079]
erfc(x)   = [1.         0.67137324 0.32219881 0.15729921]
erfinv(x) = [0.         0.27246271 0.73286908        inf]
